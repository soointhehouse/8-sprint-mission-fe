{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uB69C\\uB2C8\\\\Desktop\\\\8-sprint-mission-fe\\\\src\\\\pages\\\\MarketPage.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useEffect, useMemo, useState } from \"react\";\nimport ProductCard from \"../components/ProductCard\";\nimport \"../index.css\";\n\n// 화면폭에 따른 열/페이지 크기 계산\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction useResponsive() {\n  _s();\n  const getState = () => {\n    const w = window.innerWidth;\n    const isMobile = w <= 768;\n    const isTablet = w <= 1024 && w > 768;\n    const bestCols = isMobile ? 1 : isTablet ? 2 : 4; // 베스트: 1/2/4\n    const allCols = isMobile ? 2 : isTablet ? 3 : 5; // 전체  : 2/3/5\n    const pageSize = allCols * 2; // 보이는 줄 수 2줄 기준\n    return {\n      bestCols,\n      allCols,\n      pageSize\n    };\n  };\n  const [state, setState] = useState(getState);\n  useEffect(() => {\n    const onResize = () => setState(getState());\n    window.addEventListener(\"resize\", onResize);\n    return () => window.removeEventListener(\"resize\", onResize);\n  }, []);\n  return state;\n}\n_s(useResponsive, \"ktghyINEdXPa8mlabF3BM66I6og=\");\nconst BASE = \"https://panda-market-api.vercel.app\";\nexport default function MarketPage() {\n  _s2();\n  // UI 상태\n  const {\n    bestCols,\n    pageSize\n  } = useResponsive();\n  const [sort, setSort] = useState(\"recent\"); // \"recent\" | \"favorite\"\n  const [page, setPage] = useState(1);\n  const [keyword, setKeyword] = useState(\"\");\n  const [typed, setTyped] = useState(\"\"); // 입력값 (디바운스용)\n\n  // 데이터 상태\n  const [best, setBest] = useState([]);\n  const [list, setList] = useState([]);\n  const [totalCount, setTotalCount] = useState(0);\n  const [loadingBest, setLoadingBest] = useState(false);\n  const [loadingAll, setLoadingAll] = useState(false);\n\n  // 검색 디바운스 (300ms)\n  useEffect(() => {\n    const t = setTimeout(() => {\n      setKeyword(typed);\n      setPage(1); // 검색 바뀌면 1페이지로\n    }, 300);\n    return () => clearTimeout(t);\n  }, [typed]);\n\n  // 베스트 상품 (좋아요순)\n  useEffect(() => {\n    let alive = true;\n    async function run() {\n      try {\n        setLoadingBest(true);\n        const url = new URL(`${BASE}/products`);\n        url.searchParams.set(\"page\", \"1\");\n        url.searchParams.set(\"pageSize\", String(bestCols));\n        url.searchParams.set(\"sort\", \"favorite\");\n        const res = await fetch(url);\n        if (!res.ok) throw new Error(`HTTP ${res.status}`);\n        const data = await res.json();\n        const arr = Array.isArray(data === null || data === void 0 ? void 0 : data.list) ? data.list : data;\n        if (alive) setBest(arr || []);\n      } catch (e) {\n        console.error(\"[BestProducts] error:\", e);\n      } finally {\n        if (alive) setLoadingBest(false);\n      }\n    }\n    run();\n    return () => {\n      alive = false;\n    };\n  }, [bestCols]);\n\n  // 전체 상품\n  useEffect(() => {\n    let alive = true;\n    async function run() {\n      try {\n        setLoadingAll(true);\n        const url = new URL(`${BASE}/products`);\n        url.searchParams.set(\"page\", String(page));\n        url.searchParams.set(\"pageSize\", String(pageSize));\n        if (keyword) url.searchParams.set(\"keyword\", keyword);\n        // 최신순/좋아요순\n        url.searchParams.set(\"sort\", sort); // API가 recent/favorite 지원한다고 가정\n\n        const res = await fetch(url);\n        if (!res.ok) throw new Error(`HTTP ${res.status}`);\n        const data = await res.json();\n        const arr = Array.isArray(data === null || data === void 0 ? void 0 : data.list) ? data.list : data;\n        if (alive) {\n          setList(arr || []);\n          // totalCount 필드명 문서대로 사용(없을 경우 0)\n          setTotalCount(typeof (data === null || data === void 0 ? void 0 : data.totalCount) === \"number\" ? data.totalCount : 0);\n        }\n      } catch (e) {\n        console.error(\"[ProductList] error:\", e);\n      } finally {\n        if (alive) setLoadingAll(false);\n      }\n    }\n    run();\n    return () => {\n      alive = false;\n    };\n  }, [page, pageSize, sort, keyword]);\n\n  // 총 페이지 수\n  const totalPages = useMemo(() => {\n    if (!totalCount) return 1;\n    return Math.max(1, Math.ceil(totalCount / pageSize));\n  }, [totalCount, pageSize]);\n\n  // 정렬 바뀌면 1페이지로\n  function onChangeSort(e) {\n    setSort(e.target.value);\n    setPage(1);\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"market main-offset\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"section-title\",\n        children: \"\\uBCA0\\uC2A4\\uD2B8 \\uC0C1\\uD488\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid best-products\",\n        children: loadingBest ? Array.from({\n          length: bestCols\n        }).map((_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"skeleton\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 62\n        }, this)) : best.map(p => /*#__PURE__*/_jsxDEV(ProductCard, {\n          p: p\n        }, p.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toolbar\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"search\",\n          placeholder: \"\\uC0C1\\uD488 \\uAC80\\uC0C9\",\n          value: typed,\n          onChange: e => setTyped(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"sort\",\n          value: sort,\n          onChange: onChangeSort,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"recent\",\n            children: \"\\uCD5C\\uC2E0 \\uC21C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"favorite\",\n            children: \"\\uC88B\\uC544\\uC694 \\uC21C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"section-title\",\n        children: \"\\uD310\\uB9E4 \\uC911\\uC778 \\uC0C1\\uD488\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid all-products\",\n        children: loadingAll ? Array.from({\n          length: pageSize\n        }).map((_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"skeleton\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 62\n        }, this)) : list.map(p => /*#__PURE__*/_jsxDEV(ProductCard, {\n          p: p\n        }, p.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination\",\n        children: Array.from({\n          length: totalPages\n        }).slice(0, 8).map((_, i) => {\n          const n = i + 1;\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            className: page === n ? \"active\" : \"\",\n            onClick: () => setPage(n),\n            children: n\n          }, n, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n_s2(MarketPage, \"3ZeSqEpMKp2UBdMrxzH5ab/hZRs=\", false, function () {\n  return [useResponsive];\n});\n_c = MarketPage;\nvar _c;\n$RefreshReg$(_c, \"MarketPage\");","map":{"version":3,"names":["useEffect","useMemo","useState","ProductCard","jsxDEV","_jsxDEV","useResponsive","_s","getState","w","window","innerWidth","isMobile","isTablet","bestCols","allCols","pageSize","state","setState","onResize","addEventListener","removeEventListener","BASE","MarketPage","_s2","sort","setSort","page","setPage","keyword","setKeyword","typed","setTyped","best","setBest","list","setList","totalCount","setTotalCount","loadingBest","setLoadingBest","loadingAll","setLoadingAll","t","setTimeout","clearTimeout","alive","run","url","URL","searchParams","set","String","res","fetch","ok","Error","status","data","json","arr","Array","isArray","e","console","error","totalPages","Math","max","ceil","onChangeSort","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","from","length","map","_","i","p","id","placeholder","onChange","slice","n","onClick","_c","$RefreshReg$"],"sources":["C:/Users/뚜니/Desktop/8-sprint-mission-fe/src/pages/MarketPage.jsx"],"sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\r\nimport ProductCard from \"../components/ProductCard\";\r\nimport \"../index.css\";\r\n\r\n// 화면폭에 따른 열/페이지 크기 계산\r\nfunction useResponsive() {\r\n  const getState = () => {\r\n    const w = window.innerWidth;\r\n    const isMobile = w <= 768;\r\n    const isTablet = w <= 1024 && w > 768;\r\n    const bestCols = isMobile ? 1 : isTablet ? 2 : 4;  // 베스트: 1/2/4\r\n    const allCols  = isMobile ? 2 : isTablet ? 3 : 5;  // 전체  : 2/3/5\r\n    const pageSize = allCols * 2;                      // 보이는 줄 수 2줄 기준\r\n    return { bestCols, allCols, pageSize };\r\n  };\r\n\r\n  const [state, setState] = useState(getState);\r\n  useEffect(() => {\r\n    const onResize = () => setState(getState());\r\n    window.addEventListener(\"resize\", onResize);\r\n    return () => window.removeEventListener(\"resize\", onResize);\r\n  }, []);\r\n  return state;\r\n}\r\n\r\nconst BASE = \"https://panda-market-api.vercel.app\";\r\n\r\nexport default function MarketPage() {\r\n  // UI 상태\r\n  const { bestCols, pageSize } = useResponsive();\r\n  const [sort, setSort] = useState(\"recent\");   // \"recent\" | \"favorite\"\r\n  const [page, setPage] = useState(1);\r\n  const [keyword, setKeyword] = useState(\"\");\r\n  const [typed, setTyped] = useState(\"\");       // 입력값 (디바운스용)\r\n\r\n  // 데이터 상태\r\n  const [best, setBest] = useState([]);\r\n  const [list, setList] = useState([]);\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const [loadingBest, setLoadingBest] = useState(false);\r\n  const [loadingAll, setLoadingAll] = useState(false);\r\n\r\n  // 검색 디바운스 (300ms)\r\n  useEffect(() => {\r\n    const t = setTimeout(() => {\r\n      setKeyword(typed);\r\n      setPage(1); // 검색 바뀌면 1페이지로\r\n    }, 300);\r\n    return () => clearTimeout(t);\r\n  }, [typed]);\r\n\r\n  // 베스트 상품 (좋아요순)\r\n  useEffect(() => {\r\n    let alive = true;\r\n    async function run() {\r\n      try {\r\n        setLoadingBest(true);\r\n        const url = new URL(`${BASE}/products`);\r\n        url.searchParams.set(\"page\", \"1\");\r\n        url.searchParams.set(\"pageSize\", String(bestCols));\r\n        url.searchParams.set(\"sort\", \"favorite\");\r\n        const res = await fetch(url);\r\n        if (!res.ok) throw new Error(`HTTP ${res.status}`);\r\n        const data = await res.json();\r\n        const arr = Array.isArray(data?.list) ? data.list : data;\r\n        if (alive) setBest(arr || []);\r\n      } catch (e) {\r\n        console.error(\"[BestProducts] error:\", e);\r\n      } finally {\r\n        if (alive) setLoadingBest(false);\r\n      }\r\n    }\r\n    run();\r\n    return () => { alive = false; };\r\n  }, [bestCols]);\r\n\r\n  // 전체 상품\r\n  useEffect(() => {\r\n    let alive = true;\r\n    async function run() {\r\n      try {\r\n        setLoadingAll(true);\r\n        const url = new URL(`${BASE}/products`);\r\n        url.searchParams.set(\"page\", String(page));\r\n        url.searchParams.set(\"pageSize\", String(pageSize));\r\n        if (keyword) url.searchParams.set(\"keyword\", keyword);\r\n        // 최신순/좋아요순\r\n        url.searchParams.set(\"sort\", sort); // API가 recent/favorite 지원한다고 가정\r\n\r\n        const res = await fetch(url);\r\n        if (!res.ok) throw new Error(`HTTP ${res.status}`);\r\n        const data = await res.json();\r\n        const arr = Array.isArray(data?.list) ? data.list : data;\r\n        if (alive) {\r\n          setList(arr || []);\r\n          // totalCount 필드명 문서대로 사용(없을 경우 0)\r\n          setTotalCount(typeof data?.totalCount === \"number\" ? data.totalCount : 0);\r\n        }\r\n      } catch (e) {\r\n        console.error(\"[ProductList] error:\", e);\r\n      } finally {\r\n        if (alive) setLoadingAll(false);\r\n      }\r\n    }\r\n    run();\r\n    return () => { alive = false; };\r\n  }, [page, pageSize, sort, keyword]);\r\n\r\n  // 총 페이지 수\r\n  const totalPages = useMemo(() => {\r\n    if (!totalCount) return 1;\r\n    return Math.max(1, Math.ceil(totalCount / pageSize));\r\n  }, [totalCount, pageSize]);\r\n\r\n  // 정렬 바뀌면 1페이지로\r\n  function onChangeSort(e) {\r\n    setSort(e.target.value);\r\n    setPage(1);\r\n  }\r\n\r\n  return (\r\n    <main className=\"market main-offset\">\r\n      <div className=\"container\">\r\n        {/* 베스트 섹션 */}\r\n        <h2 className=\"section-title\">베스트 상품</h2>\r\n        <div className=\"grid best-products\">\r\n          {loadingBest\r\n            ? Array.from({ length: bestCols }).map((_, i) => <div className=\"skeleton\" key={i} />)\r\n            : best.map((p) => (\r\n                <ProductCard key={p.id} p={p} />\r\n              ))\r\n          }\r\n        </div>\r\n\r\n        {/* 툴바 */}\r\n        <div className=\"toolbar\">\r\n          <input\r\n            className=\"search\"\r\n            placeholder=\"상품 검색\"\r\n            value={typed}\r\n            onChange={(e) => setTyped(e.target.value)}\r\n          />\r\n          <select className=\"sort\" value={sort} onChange={onChangeSort}>\r\n            <option value=\"recent\">최신 순</option>\r\n            <option value=\"favorite\">좋아요 순</option>\r\n          </select>\r\n        </div>\r\n\r\n        {/* 전체 상품 */}\r\n        <h2 className=\"section-title\">판매 중인 상품</h2>\r\n        <div className=\"grid all-products\">\r\n          {loadingAll\r\n            ? Array.from({ length: pageSize }).map((_, i) => <div className=\"skeleton\" key={i} />)\r\n            : list.map((p) => (\r\n                <ProductCard key={p.id} p={p} />\r\n              ))\r\n          }\r\n        </div>\r\n\r\n        {/* 페이지네이션 */}\r\n        <div className=\"pagination\">\r\n          {Array.from({ length: totalPages }).slice(0, 8).map((_, i) => {\r\n            const n = i + 1;\r\n            return (\r\n              <button\r\n                key={n}\r\n                className={page === n ? \"active\" : \"\"}\r\n                onClick={() => setPage(n)}\r\n              >\r\n                {n}\r\n              </button>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n}"],"mappings":";;;AAAA,SAASA,SAAS,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AACpD,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAO,cAAc;;AAErB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAMC,QAAQ,GAAGA,CAAA,KAAM;IACrB,MAAMC,CAAC,GAAGC,MAAM,CAACC,UAAU;IAC3B,MAAMC,QAAQ,GAAGH,CAAC,IAAI,GAAG;IACzB,MAAMI,QAAQ,GAAGJ,CAAC,IAAI,IAAI,IAAIA,CAAC,GAAG,GAAG;IACrC,MAAMK,QAAQ,GAAGF,QAAQ,GAAG,CAAC,GAAGC,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC,CAAE;IACnD,MAAME,OAAO,GAAIH,QAAQ,GAAG,CAAC,GAAGC,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC,CAAE;IACnD,MAAMG,QAAQ,GAAGD,OAAO,GAAG,CAAC,CAAC,CAAsB;IACnD,OAAO;MAAED,QAAQ;MAAEC,OAAO;MAAEC;IAAS,CAAC;EACxC,CAAC;EAED,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAACM,QAAQ,CAAC;EAC5CR,SAAS,CAAC,MAAM;IACd,MAAMmB,QAAQ,GAAGA,CAAA,KAAMD,QAAQ,CAACV,QAAQ,CAAC,CAAC,CAAC;IAC3CE,MAAM,CAACU,gBAAgB,CAAC,QAAQ,EAAED,QAAQ,CAAC;IAC3C,OAAO,MAAMT,MAAM,CAACW,mBAAmB,CAAC,QAAQ,EAAEF,QAAQ,CAAC;EAC7D,CAAC,EAAE,EAAE,CAAC;EACN,OAAOF,KAAK;AACd;AAACV,EAAA,CAlBQD,aAAa;AAoBtB,MAAMgB,IAAI,GAAG,qCAAqC;AAElD,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,GAAA;EACnC;EACA,MAAM;IAAEV,QAAQ;IAAEE;EAAS,CAAC,GAAGV,aAAa,CAAC,CAAC;EAC9C,MAAM,CAACmB,IAAI,EAAEC,OAAO,CAAC,GAAGxB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAG;EAC9C,MAAM,CAACyB,IAAI,EAAEC,OAAO,CAAC,GAAG1B,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAAC2B,OAAO,EAAEC,UAAU,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC6B,KAAK,EAAEC,QAAQ,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAO;;EAE9C;EACA,MAAM,CAAC+B,IAAI,EAAEC,OAAO,CAAC,GAAGhC,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACiC,IAAI,EAAEC,OAAO,CAAC,GAAGlC,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACmC,UAAU,EAAEC,aAAa,CAAC,GAAGpC,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACqC,WAAW,EAAEC,cAAc,CAAC,GAAGtC,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACuC,UAAU,EAAEC,aAAa,CAAC,GAAGxC,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACAF,SAAS,CAAC,MAAM;IACd,MAAM2C,CAAC,GAAGC,UAAU,CAAC,MAAM;MACzBd,UAAU,CAACC,KAAK,CAAC;MACjBH,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IACd,CAAC,EAAE,GAAG,CAAC;IACP,OAAO,MAAMiB,YAAY,CAACF,CAAC,CAAC;EAC9B,CAAC,EAAE,CAACZ,KAAK,CAAC,CAAC;;EAEX;EACA/B,SAAS,CAAC,MAAM;IACd,IAAI8C,KAAK,GAAG,IAAI;IAChB,eAAeC,GAAGA,CAAA,EAAG;MACnB,IAAI;QACFP,cAAc,CAAC,IAAI,CAAC;QACpB,MAAMQ,GAAG,GAAG,IAAIC,GAAG,CAAC,GAAG3B,IAAI,WAAW,CAAC;QACvC0B,GAAG,CAACE,YAAY,CAACC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC;QACjCH,GAAG,CAACE,YAAY,CAACC,GAAG,CAAC,UAAU,EAAEC,MAAM,CAACtC,QAAQ,CAAC,CAAC;QAClDkC,GAAG,CAACE,YAAY,CAACC,GAAG,CAAC,MAAM,EAAE,UAAU,CAAC;QACxC,MAAME,GAAG,GAAG,MAAMC,KAAK,CAACN,GAAG,CAAC;QAC5B,IAAI,CAACK,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,QAAQH,GAAG,CAACI,MAAM,EAAE,CAAC;QAClD,MAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;QAC7B,MAAMC,GAAG,GAAGC,KAAK,CAACC,OAAO,CAACJ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEvB,IAAI,CAAC,GAAGuB,IAAI,CAACvB,IAAI,GAAGuB,IAAI;QACxD,IAAIZ,KAAK,EAAEZ,OAAO,CAAC0B,GAAG,IAAI,EAAE,CAAC;MAC/B,CAAC,CAAC,OAAOG,CAAC,EAAE;QACVC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,CAAC,CAAC;MAC3C,CAAC,SAAS;QACR,IAAIjB,KAAK,EAAEN,cAAc,CAAC,KAAK,CAAC;MAClC;IACF;IACAO,GAAG,CAAC,CAAC;IACL,OAAO,MAAM;MAAED,KAAK,GAAG,KAAK;IAAE,CAAC;EACjC,CAAC,EAAE,CAAChC,QAAQ,CAAC,CAAC;;EAEd;EACAd,SAAS,CAAC,MAAM;IACd,IAAI8C,KAAK,GAAG,IAAI;IAChB,eAAeC,GAAGA,CAAA,EAAG;MACnB,IAAI;QACFL,aAAa,CAAC,IAAI,CAAC;QACnB,MAAMM,GAAG,GAAG,IAAIC,GAAG,CAAC,GAAG3B,IAAI,WAAW,CAAC;QACvC0B,GAAG,CAACE,YAAY,CAACC,GAAG,CAAC,MAAM,EAAEC,MAAM,CAACzB,IAAI,CAAC,CAAC;QAC1CqB,GAAG,CAACE,YAAY,CAACC,GAAG,CAAC,UAAU,EAAEC,MAAM,CAACpC,QAAQ,CAAC,CAAC;QAClD,IAAIa,OAAO,EAAEmB,GAAG,CAACE,YAAY,CAACC,GAAG,CAAC,SAAS,EAAEtB,OAAO,CAAC;QACrD;QACAmB,GAAG,CAACE,YAAY,CAACC,GAAG,CAAC,MAAM,EAAE1B,IAAI,CAAC,CAAC,CAAC;;QAEpC,MAAM4B,GAAG,GAAG,MAAMC,KAAK,CAACN,GAAG,CAAC;QAC5B,IAAI,CAACK,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,QAAQH,GAAG,CAACI,MAAM,EAAE,CAAC;QAClD,MAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;QAC7B,MAAMC,GAAG,GAAGC,KAAK,CAACC,OAAO,CAACJ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEvB,IAAI,CAAC,GAAGuB,IAAI,CAACvB,IAAI,GAAGuB,IAAI;QACxD,IAAIZ,KAAK,EAAE;UACTV,OAAO,CAACwB,GAAG,IAAI,EAAE,CAAC;UAClB;UACAtB,aAAa,CAAC,QAAOoB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAErB,UAAU,MAAK,QAAQ,GAAGqB,IAAI,CAACrB,UAAU,GAAG,CAAC,CAAC;QAC3E;MACF,CAAC,CAAC,OAAO0B,CAAC,EAAE;QACVC,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEF,CAAC,CAAC;MAC1C,CAAC,SAAS;QACR,IAAIjB,KAAK,EAAEJ,aAAa,CAAC,KAAK,CAAC;MACjC;IACF;IACAK,GAAG,CAAC,CAAC;IACL,OAAO,MAAM;MAAED,KAAK,GAAG,KAAK;IAAE,CAAC;EACjC,CAAC,EAAE,CAACnB,IAAI,EAAEX,QAAQ,EAAES,IAAI,EAAEI,OAAO,CAAC,CAAC;;EAEnC;EACA,MAAMqC,UAAU,GAAGjE,OAAO,CAAC,MAAM;IAC/B,IAAI,CAACoC,UAAU,EAAE,OAAO,CAAC;IACzB,OAAO8B,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,IAAI,CAAChC,UAAU,GAAGrB,QAAQ,CAAC,CAAC;EACtD,CAAC,EAAE,CAACqB,UAAU,EAAErB,QAAQ,CAAC,CAAC;;EAE1B;EACA,SAASsD,YAAYA,CAACP,CAAC,EAAE;IACvBrC,OAAO,CAACqC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC;IACvB5C,OAAO,CAAC,CAAC,CAAC;EACZ;EAEA,oBACEvB,OAAA;IAAMoE,SAAS,EAAC,oBAAoB;IAAAC,QAAA,eAClCrE,OAAA;MAAKoE,SAAS,EAAC,WAAW;MAAAC,QAAA,gBAExBrE,OAAA;QAAIoE,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzCzE,OAAA;QAAKoE,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAChCnC,WAAW,GACRsB,KAAK,CAACkB,IAAI,CAAC;UAAEC,MAAM,EAAElE;QAAS,CAAC,CAAC,CAACmE,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,kBAAK9E,OAAA;UAAKoE,SAAS,EAAC;QAAU,GAAMU,CAAC;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,CAAC,GACpF7C,IAAI,CAACgD,GAAG,CAAEG,CAAC,iBACT/E,OAAA,CAACF,WAAW;UAAYiF,CAAC,EAAEA;QAAE,GAAXA,CAAC,CAACC,EAAE;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAChC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEH,CAAC,eAGNzE,OAAA;QAAKoE,SAAS,EAAC,SAAS;QAAAC,QAAA,gBACtBrE,OAAA;UACEoE,SAAS,EAAC,QAAQ;UAClBa,WAAW,EAAC,2BAAO;UACnBd,KAAK,EAAEzC,KAAM;UACbwD,QAAQ,EAAGxB,CAAC,IAAK/B,QAAQ,CAAC+B,CAAC,CAACQ,MAAM,CAACC,KAAK;QAAE;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3C,CAAC,eACFzE,OAAA;UAAQoE,SAAS,EAAC,MAAM;UAACD,KAAK,EAAE/C,IAAK;UAAC8D,QAAQ,EAAEjB,YAAa;UAAAI,QAAA,gBAC3DrE,OAAA;YAAQmE,KAAK,EAAC,QAAQ;YAAAE,QAAA,EAAC;UAAI;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACpCzE,OAAA;YAAQmE,KAAK,EAAC,UAAU;YAAAE,QAAA,EAAC;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eAGNzE,OAAA;QAAIoE,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3CzE,OAAA;QAAKoE,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAC/BjC,UAAU,GACPoB,KAAK,CAACkB,IAAI,CAAC;UAAEC,MAAM,EAAEhE;QAAS,CAAC,CAAC,CAACiE,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,kBAAK9E,OAAA;UAAKoE,SAAS,EAAC;QAAU,GAAMU,CAAC;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,CAAC,GACpF3C,IAAI,CAAC8C,GAAG,CAAEG,CAAC,iBACT/E,OAAA,CAACF,WAAW;UAAYiF,CAAC,EAAEA;QAAE,GAAXA,CAAC,CAACC,EAAE;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAChC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEH,CAAC,eAGNzE,OAAA;QAAKoE,SAAS,EAAC,YAAY;QAAAC,QAAA,EACxBb,KAAK,CAACkB,IAAI,CAAC;UAAEC,MAAM,EAAEd;QAAW,CAAC,CAAC,CAACsB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACP,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UAC5D,MAAMM,CAAC,GAAGN,CAAC,GAAG,CAAC;UACf,oBACE9E,OAAA;YAEEoE,SAAS,EAAE9C,IAAI,KAAK8D,CAAC,GAAG,QAAQ,GAAG,EAAG;YACtCC,OAAO,EAAEA,CAAA,KAAM9D,OAAO,CAAC6D,CAAC,CAAE;YAAAf,QAAA,EAEzBe;UAAC,GAJGA,CAAC;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAKA,CAAC;QAEb,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEX;AAACtD,GAAA,CAtJuBD,UAAU;EAAA,QAEDjB,aAAa;AAAA;AAAAqF,EAAA,GAFtBpE,UAAU;AAAA,IAAAoE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}